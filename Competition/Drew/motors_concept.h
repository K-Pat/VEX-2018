#pragma config(Motor,  port2,           p_driveRight,  tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port3,           p_driveLeft,   tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port4,           p_piston,      tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port5,           p_liftLowLeft, tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port6,           p_liftLowRight, tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port7,           p_liftUpLeft,  tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port8,           p_liftUpRight, tmotorVex393_MC29, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

// NOTE: The p_ prefix is for concept, I don't care if that usually means pointer

#define TRUE 1
#define FALSE 0

//Min/Max Speeds, I don't like magic numbers.
#define MAX_SPEED 127
#define MIN_SPEED 1
#define NO_SPEED 0

void mapJoystick() {
	//Map concept drive motors to controller 1
	//Drive Controller will be used as controller 1
	motor[p_driveLeft] = vexRT[Ch1];
	motor[p_driveRight] = vexRT[Ch2];

	//Mapping concept 4Bar (2 level) motors as if they were independent
	//Lift/Piston controller will be used as controller 2

	//Mapping all of these to the same port, so it can be controlled all at once
	//With proper building we don't need to do all of the other stuff :))
	motor[p_liftLowLeft] = vexRT[Ch1Xmtr2];
	motor[p_liftLowRight] = vexRT[Ch1Xmtr2];
	motor[p_liftUpLeft] = vexRT[Ch1Xmtr2];
	motor[p_liftUpRight] = vexRT[Ch1Xmtr2];

	//Boolean used as toggle for the if() :weary:
	//No, I will not make this a global.
	bool piston_enabled = false;

	//This works, right?
	if(vexRT[Btn5DXmtr2] == TRUE || piston_enabled) {
		motor[p_piston] = MAX_SPEED;
		piston_enabled = !piston_enabled;
		} else if(!piston_enabled) {
		motor[p_piston] = NO_SPEED;
	}

}

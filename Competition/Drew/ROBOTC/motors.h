#pragma config(Motor,  port1,           dBackRight,    tmotorVex393TurboSpeed_HBridge, openLoop, reversed)
#pragma config(Motor,  port2,           dBackLeft,     tmotorVex393TurboSpeed_MC29, openLoop)
#pragma config(Motor,  port3,           dFrontRight,   tmotorVex393TurboSpeed_MC29, openLoop, reversed)
#pragma config(Motor,  port4,           dFrontLeft,    tmotorVex393TurboSpeed_MC29, openLoop)
#pragma config(Motor,  port5,           intake,        tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port6,           lift,          tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port8,           pistonLeft,    tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port9,           pistonRight,   tmotorVex393_MC29, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#include "globals.h"

void singleJoystick() { //Yeah, this is arcade drive
	motor[dBackLeft] = (vexRT[Ch2] + vexRT[Ch1]) / 2;
	motor[dFrontLeft] = (vexRT[Ch2] + vexRT[Ch1]) / 2;
	motor[dBackRight] = (vexRT[Ch2] - vexRT[Ch1]) / 2;
	motor[dFrontRight] = (vexRT[Ch2] - vexRT[Ch1]) / 2;
}

void dualJoystick() {
	motor[dBackLeft] = vexRT[Ch3];
	motor[dFrontLeft] = vexRT[Ch3];
	motor[dBackRight] = vexRT[Ch2];
	motor[dFrontRight] = vexRT[Ch2];
}

void mapJoystick() {
	dualJoystick(); //dual joystick control

	if(vexRT[Btn7L] == 1){
		motor[lift] = MAX_SPEED;
		motor[intake] = MAX_SPEED;
	}else {
		motor[lift] = NO_SPEED;
		motor[intake] = NO_SPEED;
	}

	if(vexRT[Btn7R] == 1){
		motor[pistonRight] = MAX_SPEED;
		motor[pistonLeft] = MAX_SPEED;
	}else{
		motor[pistonRight] = NO_SPEED;
		motor[pistonLeft] = NO_SPEED;
	}
}
// I like organization! :B1:

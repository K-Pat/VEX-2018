#pragma config(Motor,  port1,           dBackRight,    tmotorVex393_HBridge, openLoop, reversed)
#pragma config(Motor,  port2,           piston,        tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port3,           dFrontLeft,    tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port4,           intake,        tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port6,           flipper,       tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port7,           dFrontRight,   tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port8,           lift,          tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port9,           dBackLeft,     tmotorVex393_MC29, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#ifndef AUTOFUNC_H_
#define AUTOFUNC_H_

void stopDrive(){
	motor[dBackRight] = NO_SPEED;
	motor[dBackLeft] = NO_SPEED;
	motor[dFrontLeft] = NO_SPEED;
	motor[dFrontRight] = NO_SPEED;
}

void moveForward(float time, int speed){
	motor[dBackRight] = speed;
	motor[dBackLeft] = speed;
	motor[dFrontLeft] = speed;
	motor[dFrontRight] = speed;
	wait1Msec(time);
	stopDrive();
}

void moveBackward(float time, int speed){
	motor[dBackRight] = speed *-1;
	motor[dBackLeft] = speed *-1;
	motor[dFrontLeft] = speed *-1;
	motor[dFrontRight] = speed *-1;
	wait1Msec(time);
	stopDrive();
}

void leftTurn(float time, int speed){
	motor[dBackRight] = speed;
	motor[dFrontRight] = speed;
	wait1Msec(time);
	stopDrive();
}

void rightTurn(float time, int speed){
	motor[dBackLeft] = speed;
	motor[dFrontLeft] = speed;
	wait1Msec(time);
	stopDrive();
}

void leftSpin(float time, int speed){
	motor[dFrontRight] = speed;
	motor[dBackRight] = speed;
	motor[dBackLeft] = speed *-1;
	motor[dFrontLeft] = speed *-1;
	wait1Msec(time);
	stopDrive();
}

void rightSpin(float time, int speed){
	motor[dFrontRight] = speed *-1;
	motor[dBackRight] = speed *-1;
	motor[dBackLeft] = speed;
	motor[dFrontLeft] = speed;
	wait1Msec(time);
	stopDrive();
}

void rightVeer(float time, int speed, int offset) {
	motor[dBackLeft] = speed;
	motor[dFrontLeft] = speed;
	motor[dBackRight] = (speed *-1) - offset;
	motor[dFrontRight] = (speed *-1) - offset;
	wait1Msec(time);
	stopDrive();
}

void leftVeer(float time, int speed, int offset) {
	motor[dBackRight] = speed;
	motor[dFrontRight] = speed;
	motor[dBackLeft] = (speed *-1) - offset;
	motor[dFrontLeft] = (speed *-1) - offset;
	wait1Msec(time);
	stopDrive();
}

bool fireBall(bool forceShot)
{
	if(forceShot)
		mainLift = READY;

	if(mainLift != READY)
		return false; // Ball shot failed, we return false
					  // We want the ball to be fed first

	motor[piston] = MAX_SPEED;
	motor[lift] = MAX_SPEED; // Turn on lift so ball feeds
	wait1Msec(PISTON_LENGTH); // Placeholder for time
	motor[lift] = NO_SPEED;
	motor[piston] = NO_SPEED;

	mainLift = STOPPED; // Reset lift for next shot

	return true; // Shot completed successfully
}

#endif
